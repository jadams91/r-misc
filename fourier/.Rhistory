h
as_cnf(h)
binarize(h)
as_cnf(h)
binarize(h)
remove_xor(binarize(h))
remove_eqv(remove_xor(binarize(h)))
remove_imp(remove_eqv(remove_xor(binarize(h))))
h_ <- remove_imp(remove_eqv(remove_xor(binarize(h))))
move_neg(h)
move_neg(h_)
h_ <- move_neg(h_)
standardize(h_)
h_ <- standardize(h_)
h_[[1]]
h_[[1]][[1]]
h_[[1]][[2]]
h_[[1]][[2]][[1]]
h__ <- h_[[1]][[2]][[1]]
as_cnf(h__)
as_cnf(h[[1]][[2]][[2]])
as_cnf(h[[1]][[2]])
as_cnf(h_[[1]][[2]])
as_cnf(h_[[1]][[2]][[2]])
h_[[2]]
h_[[2]][[1]]
h_[[2]][[1]][[1]]
as_cnf(h_[[2]][[1]][[1]])
as_cnf(h_[[1]][[2]][[1]])
s
s <- merge_cnf(as_cnf(h_[[1]][[2]][[1]], as_cnf(s))
)
s <- merge_cnf(as_cnf(h_[[1]][[2]][[1]]), as_cnf(s))
s
s <- merge_cnf(s, as_cnf(-lquote(P %<=>% Q %xor% (P & A | B | C)) %=>% lquote(-S & U %=>% -(W %xor% (A & B)))))
s
dpll_sat(s)
dpll_sat(s)
walk_sat(s)
walk_sat(s, 0.5, 10)
walk_sat(s, 0.5, 20)
walk_sat(s, 0.5, 10)
walk_sat(s, 0.1, 10)
walk_sat(s, 0.1, 100)
?NextMethod
?eval
n <- function(l) ifelse(not(l), `-`, identity)
lsweep <- function(l) n(l)(Reduce(op(l), l, right = TRUE))
Negate
new_lcnf <- function(l) {
stopifnot(is_list(l))
structure(
l,
not = FALSE,
op  = `&`,
tag = NA_character_,
class = c("lcnf", "lsen", "logi")
)
}
as_lcnf <- function(l) UseMethod("as_lcnf")
as_lcnf.lcnf <- function(l) l
as_lcnf.llit <- function(l) new_lcnf(list(`|.logi`(l)))
as_lcnf.lsen <- function(l) do.call(lsweep, lMap(as_lcnf, l))
as_lcnf(lquote(A))
new_lcnf <- function(l) {
stopifnot(is.list(l))
structure(
l,
not = FALSE,
op  = `&`,
tag = NA_character_,
class = c("lcnf", "lsen", "logi")
)
}
as_lcnf(lquote(A))
validate_lcnf(as_lcnf(lquote(A)))
.validate_clause <- function(l) {
not <- attr(l, "not")
op  <- attr(l, "op")
if (!not) {
stop(
"The 'not' attribute of a clause must be FALSE",
call. = FALSE
)
}
if (!(is.function(op) && op %in2% logical_ops)) {
stop(
"The 'op' attribute of a clause must be an `|` operator",
call. = FALSE
)
}
invisible(Map(validate_llit, l))
l
}
validate_lcnf <- function(l) {
invisible(validate_logi(l))
not <- attr(l, "not")
op  <- attr(l, "op")
if (!not) {
stop(
"The 'not' attribute of a CNF must be FALSE",
call. = FALSE
)
}
if (!(is.function(op) && op %in2% logical_ops)) {
stop(
"The 'op' attribute of a CNF must be an `&` operator",
call. = FALSE
)
}
invisible(Map(.validate_clause, l))
l
}
validate_lcnf(as_lcnf(lquote(A)))
not(as_lcnf(lquote(A))
)
.validate_clause <- function(l) {
not <- attr(l, "not")
op  <- attr(l, "op")
if (not) {
stop(
"The 'not' attribute of a clause must be FALSE",
call. = FALSE
)
}
if (!(is.function(op) && op %in2% logical_ops)) {
stop(
"The 'op' attribute of a clause must be an `|` operator",
call. = FALSE
)
}
invisible(Map(validate_llit, l))
l
}
validate_lcnf <- function(l) {
invisible(validate_logi(l))
not <- attr(l, "not")
op  <- attr(l, "op")
if (not) {
stop(
"The 'not' attribute of a CNF must be FALSE",
call. = FALSE
)
}
if (!(is.function(op) && op %in2% logical_ops)) {
stop(
"The 'op' attribute of a CNF must be an `&` operator",
call. = FALSE
)
}
invisible(Map(.validate_clause, l))
l
}
validate_lcnf(as_lcnf(lquote(A)))
new_lcnf <- function(l, rec) {
stopifnot(is.list(l))
l <- Map(function(x) do.call(`|.logi`, x), l)
l <- do.call(`&.logi`, l)
l <- sort(l, rec)
structure(
l,
not = FALSE,
op  = `&`,
tag = NA_character_,
class = c("lcnf", "lsen", "logi")
)
}
as_lcnf(lquote(A))
as_lcnf(lquote(A), rec = F)
as_lcnf.llit <- function(l) new_lcnf(list(list(l)), rec = FALSE)
as_lcnf(lquote(A))
as_lcnf(lquote(A))
as_lcnf(lquote(A))
as_lcnf(lquote(A))
as_lcnf(lquote(A))
as_lcnf(lquote(B))
do.call(`&`, list(lquote(A)))
do.call(`&`, list(lquote(A), lquote(B)))
#### ---------------------------- LCNF CLASS -----------------------------------
new_lcnf <- function(l, rec) {
stopifnot(is.list(l))
l <- Map(function(x) do.call(`|`, x), l)
l <- do.call(`&`, l)
l <- sort(l, rec)
structure(
l,
not = FALSE,
op  = `&`,
tag = NA_character_,
class = c("lcnf", "lsen", "logi")
)
}
.validate_clause <- function(l) {
not <- attr(l, "not")
op  <- attr(l, "op")
if (not) {
stop(
"The 'not' attribute of a clause must be FALSE",
call. = FALSE
)
}
if (!(is.function(op) && op %in2% logical_ops)) {
stop(
"The 'op' attribute of a clause must be an `|` operator",
call. = FALSE
)
}
invisible(Map(validate_llit, l))
l
}
validate_lcnf <- function(l) {
invisible(validate_logi(l))
not <- attr(l, "not")
op  <- attr(l, "op")
if (not) {
stop(
"The 'not' attribute of a CNF must be FALSE",
call. = FALSE
)
}
if (!(is.function(op) && op %in2% logical_ops)) {
stop(
"The 'op' attribute of a CNF must be an `&` operator",
call. = FALSE
)
}
invisible(Map(.validate_clause, l))
l
}
lcnf <- function(l) {
validate_lcnf(new_lcnf(l, rec = T))
}
#### -------------------------- LCNF GENERICS ----------------------------------
`-.lcnf` <- function(e1, e2) {
stopifnot(missing(e2))
as_lcnf(move_neg(-binarize(e1)))
}
`|.lcnf` <- function(e1, e2) {
if (is_cnf(e1) && is_cnf(e2)) new_lcnf(cross(e1, e2), rec = TRUE)
else NextMethod()
}
`&.lcnf` <- function(e1, e2) {
if (is_cnf(e1) && is_cnf(e2)) new_lcnf(c(e1, e2), rec = FALSE)
else NextMethod()
}
`%=>%.lcnf` <- function(e1, e2) {
if (is_cnf(e1) && is_cnf(e2)) -e1 | e2
else NextMethod()
}
`%<=>%.lcnf` <- function(e1, e2) {
if (is_cnf(e1) && is_cnf(e2)) (e1 %=>% e2) & (e2 %=>% e1)
else NextMethod()
}
`%xor%.lcnf` <- function(e1, e2) {
if (is_cnf(e1) && is_cnf(e2)) -(e1 %<=>% e2)
else NextMethod()
}
as_lcnf <- function(l) UseMethod("as_lcnf")
as_lcnf.lcnf <- function(l) l
as_lcnf.llit <- function(l) new_lcnf(list(list(l)), rec = FALSE)
as_lcnf.lsen <- function(l) do.call(lsweep, lMap(as_lcnf, l))
cross <- function(l1, l2) {
Reduce(c, Map(function(x) Map(function(y) c(x, y), l1), l2))
}
s
s1 <- lquote(A) %=>% lquote(B)
s1
as_lcnf(s1)
lMap(as_cnf, s1)
lsweep(lMap(as_cnf, s1))
s1[[1]] %=>% s1[[2]]
class(s1[[1]])
str(s1)
as_lcnf(lquote(A))
str(as_lcnf(lquote(A)))
l
l <- list(lquote(A), lquote(B))
l
str(l)
class(l[[1]])
Map(as_lcnf, l)
str(Map(as_lcnf, l))
str(lMap(as_lcnf, l))
s1
lMap(as_cnf, l)
str(lMap(as_cnf, l))
str(Map(as_cnf, l))
str(Map(as_lcnf, l))
str(lMap(as_lcnf, l))
str(lMap(as_lcnf, s1))
str(as_lcnf(s1))
s2 <- lMap(as_lcnf, s1)
s2
str(s2)
s2[[1]]
str(s2[[1]])
s2[[1]] %=>% s2[[2]]
lsweep(s2)
as_lcnf.lsen <- function(l) do.call(lsweep, lMap(as_lcnf, l))
is_lcnf <- function(l) "lcnf" %in% class(l)
lsweep(s2)
`-.lcnf` <- function(e1, e2) {
stopifnot(missing(e2))
as_lcnf(move_neg(-binarize(e1)))
}
`|.lcnf` <- function(e1, e2) {
if (is_lcnf(e1) && is_lcnf(e2)) new_lcnf(cross(e1, e2), rec = TRUE)
else NextMethod()
}
`&.lcnf` <- function(e1, e2) {
if (is_lcnf(e1) && is_lcnf(e2)) new_lcnf(c(e1, e2), rec = FALSE)
else NextMethod()
}
`%=>%.lcnf` <- function(e1, e2) {
if (is_lcnf(e1) && is_lcnf(e2)) -e1 | e2
else NextMethod()
}
`%<=>%.lcnf` <- function(e1, e2) {
if (is_lcnf(e1) && is_lcnf(e2)) (e1 %=>% e2) & (e2 %=>% e1)
else NextMethod()
}
`%xor%.lcnf` <- function(e1, e2) {
if (is_lcnf(e1) && is_lcnf(e2)) -(e1 %<=>% e2)
else NextMethod()
}
lsweep(s2)
as_lcnf(s1)
binarize(s1[[1]])
-binarize(s1[[1]])
binarize(s2[[1]])
-binarize(s2[[1]])
move_neg <- function(l) {
if (is_llit(l)) return(l)
if (!identical(tag(l), "binary")) l <- binarize(l)
if (not(l) && length(l) == 1) l <- -l[[1]]
else if (not(l) && identical(op(l), `|`)) l <- -l[[1]] & -l[[2]]
else if (not(l) && identical(op(l), `&`)) l <- -l[[1]] | -l[[2]]
lMap(move_neg, l, .tag = "binary")
}
-binarize(s2[[1]])
move_neg(-binarize(s2[[1]]))
move_neg(-binarize(s2[[1]][[1]]))
move_neg(-binarize(s2[[1]]))
str(move_neg(-binarize(s2[[1]])))
s3 <- s2[[1]]
s2
s3
-s3
-s3[[1]]
binarize(-s3[[1]])
s4 <- -s3[[1]]
s4[[1]]
-s4[[1]]
move_neg <- function(l) {
if (is_llit(l)) return(l)
if (!identical(tag(l), "binary")) l <- binarize(l)
if (not(l) && length(l) == 1) return(move_neg(-l[[1]]))
else if (not(l) && identical(op(l), `|`)) l <- -l[[1]] & -l[[2]]
else if (not(l) && identical(op(l), `&`)) l <- -l[[1]] | -l[[2]]
lMap(move_neg, l, .tag = "binary")
}
s3
move_neg(-s3)
-s3
s3
n(s3)(s3)
attr(s3, "not") <- TRUE
s3
move_neg(s3)
as_lcnf(s1)
lsweep(lMap(as_lcnf, s1))
as_lcnf.lsen <- function(l) lsweep(lMap(as_lcnf, l))
as_lcnf(s1)
s1
s1 <- s1 %xor% s1
s1
as_lcnf(s1)
move_neg <- function(l) {
if (is_llit(l)) return(l)
if (length(l) == 1) return(move_neg(n(1)(l[[1]])))
if (!identical(tag(l), "binary")) l <- binarize(l)
if (not(l) && identical(op(l), `|`)) l <- -l[[1]] & -l[[2]]
else if (not(l) && identical(op(l), `&`)) l <- -l[[1]] | -l[[2]]
lMap(move_neg, l, .tag = "binary")
}
w
s1
as_lcnf(s1)
move_neg <- function(l) {
if (is_llit(l)) return(l)
if (length(l) == 1) return(move_neg(n(l)(l[[1]])))
if (!identical(tag(l), "binary")) l <- binarize(l)
if (not(l) && identical(op(l), `|`)) l <- -l[[1]] & -l[[2]]
else if (not(l) && identical(op(l), `&`)) l <- -l[[1]] | -l[[2]]
lMap(move_neg, l, .tag = "binary")
}
as_lcnf(s1)
remove_tau <- function(l) {
stopifnot(is_lcnf(l))
lFilter(function(x)
Reduce(`&&`, Map(function(y)
ifelse(not(y), TRUE, !(-y %in2% x)), x)), l)
}
remove_tau(as_lcnf(s1))
str(remove_tau(as_lcnf(s1)))
`%<=>%`(lquote(A), -lquote(B), lquote(C))
a
a <- `%<=>%`(lquote(A), -lquote(B), lquote(C))
a
lsweep(a)
move_neg <- function(l) {
if (is_llit(l)) return(l)
if (length(l) == 1) return(move_neg(n(l)(l[[1]])))
if (!identical(tag(l), "binary")) l <- lsweep(l)
if (not(l) && identical(op(l), `|`)) l <- -l[[1]] & -l[[2]]
else if (not(l) && identical(op(l), `&`)) l <- -l[[1]] | -l[[2]]
lMap(move_neg, l, .tag = "binary")
}
as_lcnf(s1)
as_lcnf(a)
remove_tau(as_lcnf(a))
/2
setwd("/home/marco/Documents/PSNC/2019/clustering")
setwd("/home/marco/Documents/PSNC/2019/clustering")
setwd("/home/marco/Documents/")
setwd("/home/marco/Documents/PSNC/2019/clustering")
setwd("/home/sebastian/Documents/psnc/Fourier Analysis")
source("fun.R")
# ------------------------- DIRAC DELTA FUNCTION ------------------------------
source("dirac.R")
L  <- 10
xs <- seq(-L, L, 0.01)
ddf <- dirac(xs, 2)
ys  <- xs ^ 2
integral(xs, ddf)
integral(xs, ddf * ys)
plot(xs, ddf, type = "l")
# ---------------------------- FOURIER SERIES ---------------------------------
source("series.R")
L  <- 1
xs <- seq(-L, L, 0.01)
m <- 2
n <- 2
integral(xs, cos(xs * m * pi / L) * cos(xs * n * pi / L)) # = L
integral(xs, sin(xs * m * pi / L) * sin(xs * n * pi / L)) # = L
integral(xs, cos(xs * m * pi / L) * sin(xs * n * pi / L)) # = 0
n <- 3
integral(xs, cos(xs * m * pi / L) * cos(xs * n * pi / L)) # = 0
integral(xs, sin(xs * m * pi / L) * sin(xs * n * pi / L)) # = 0
ys  <- exp(-abs(xs))
cf1 <- sine_coefficients(xs, ys, 1)
cf5 <- sine_coefficients(xs, ys, 5)
series1 <- calculate_sine(cf1, xs)
series2 <- calculate_sine(cf5, xs)
plot(xs, ys, type = "l")
lines(series1$xs, series1$ys, type = "l", col = "blue")
lines(series2$xs, series2$ys, type = "l", col = "red")
ys <- xs ^ 2
cf <- sine_coefficients(xs, ys, 10)
series <- calculate_sine(cf, xs, c(-5, 5))
barplot(cf$as, ylim = 1.5 * c(min(cf$as), max(cf$as)))
gs = seq(-5, 5, 0.1)
plot(gs, gs ^ 2, xlim = c(-5, 5), ylim = c(0, 2), type = "l")
lines(series$xs, series$ys, type = "l", col = "red")
# ------------------------- COMPLEX FOURIER SERIES ----------------------------
source("series_complex.R")
L  <- 1
xs <- seq(-L, L, 0.01)
m <- 2
n <- 2
integral(xs, exp(xs * 1i * m * pi / L) * exp(xs * -1i * n * pi / L)) # = 2L
n <- 3
integral(xs, exp(xs * 1i * m * pi / L) * exp(xs * -1i * n * pi / L)) # = 0
ys  <- xs ^3 - xs ^ 2
ccf <- complex_coefficients(xs, ys, 5)
Im(ccf + rev(ccf)) # = 0, as cf[m] == Conj(cf[-m])
series <- calculate_complex(ccf, xs)
plot(xs, ys, type = "l")
lines(series$xs, Re(series$ys), type = "l", col = "red")
xs_off <- seq(-L, L, length.out = 1000)
ys     <- 1 / (4 * sqrt(abs(xs_off)))
ccf    <- complex_coefficients(xs_off, ys, 15)
series <- calculate_complex(ccf, xs_off)
plot(xs_off, ys, xlim = c(0, 1), ylim = c(0, 3), type = "l")
lines(series$xs, Re(series$ys), type = "l", col = "red")
ys_p   <- derivative(xs_off, ys)
s_ys_p <- derivative(series$xs, series$ys)
plot(xs_off, ys_p, xlim = c(0, 1), ylim = c(-10, 10), type = "l")
lines(series$xs, Re(s_ys_p), type = "l", col = "red")
L  <- 1
xs <- seq(-L, L, length.out = 2000)
ys  <- sign(xs)
err <- numeric()
for (i in (seq(10, 250, 10))) {
ccf    <- complex_coefficients(xs, ys, i)
series <- calculate_complex(ccf, xs)
if (i %in% c(10, 50, 100, 250)) {
plot(xs, ys, type = "l", ylim = c(-1.2, 1.2))
lines(series$xs, Re(series$ys), type = "l", col = "red")
}
err <- c(err, series_error(xs, ys, series$ys))
}
barplot(err)
L  <- 1
xs <- seq(-L, L, length.out = 5000)
ys <- 1 / (xs + 2L) ^ 2
ccf    <- complex_coefficients(xs, ys, 500)
Re(sum(ccf * Conj(ccf)))
integral(xs, ys * Conj(ys)) / (2 * L)
pi_apx  <- (90 * cumsum(1 / (1:10000) ^ 4)) ^ (1/4)
pi_diff <- pi - pi_apx
plot(pi_diff, log = "y", type = "l")
