s4 <- t1 %<=>% -s1
t3 <- as_lcnf(s4)
t4 <- as_cnf(s4)
t4
t3 <- as_lcnf(s4)
new_lcnf <- function(l, rec) {
stopifnot(is.list(l))
l <- Map(function(x) do.call(`|`, x), l)
l <- do.call(`&`, l)
l <- remove_tau(l)
print(l)
l <- sort(l, rec)
structure(
l,
not = FALSE,
op  = `&`,
tag = NA_character_,
class = c("lcnf", "lsen", "logi")
)
}
t3 <- as_lcnf(s4)
`-.lcnf` <- function(e1, e2) {
stopifnot(missing(e2))
as_lcnf(move_neg(NextMethod()))
}
as_lcnf(lquote(A %<=>% B))
a <- as_lcnf(lquote(A %<=>% B))
a
-a
new_lcnf <- function(l, rec) {
stopifnot(is.list(l))
l <- Map(function(x) do.call(`|`, x), l)
l <- do.call(`&`, l)
l <- remove_tau(l)
l <- sort(l, rec)
structure(
l,
not = FALSE,
op  = `&`,
tag = NA_character_,
class = c("lcnf", "lsen", "logi")
)
}
`-.lcnf` <- function(e1, e2) {
stopifnot(missing(e2))
cat('-')
as_lcnf(move_neg(NextMethod()))
}
`|.lcnf` <- function(e1, e2) {
cat('|')
if (is_lcnf(e1) && is_lcnf(e2)) new_lcnf(cross(e1, e2), rec = TRUE)
else NextMethod()
}
`&.lcnf` <- function(e1, e2) {
cat('&')
if (is_lcnf(e1) && is_lcnf(e2)) new_lcnf(c(e1, e2), rec = FALSE)
else NextMethod()
}
`%=>%.lcnf` <- function(e1, e2) {
cat('=>')
if (is_lcnf(e1) && is_lcnf(e2)) -e1 | e2
else NextMethod()
}
`%<=>%.lcnf` <- function(e1, e2) {
cat('<=>')
if (is_lcnf(e1) && is_lcnf(e2)) (e1 %=>% e2) & (e2 %=>% e1)
else NextMethod()
}
s4 <- t1 %<=>% t2
Map(as.character, list())
unlist(Map(as.character, list()))
ordeer(NULL)
order(NULL)
vapply(list(), as.character, character(1))
order(character(0))
list()[[integer(0)]]
list()[integer(0)]
sort.logi <- function(l, recursive = FALSE, .tag = tag(l)) {
if (is_llit(l)) return(l)
if (recursive) l <- lMap(sort, l)
o <- order(vapply(l, as.character, character(1)))
lsen(unique(l[o]), not(l), op(l), tag = .tag)
}
s4 <- t1 %<=>% t2
validate_lsen <- function(l) {
val <- unclass(l)
not <- attr(l, "not")
op  <- attr(l, "op")
tag <- attr(l, "tag")
if (!(is.list(val))) {
stop(
"The value of a sentence must be a list of at least one logi element",
call. = FALSE
)
}
if (!(is.logical(not) && length(not) == 1)) {
stop(
"The 'not' attribute must be a logical vector of length 1",
call. = FALSE
)
}
if (!(is.function(op) && op %in2% logical_ops)) {
stop(
"The 'op' attribute must be a logical operator",
call. = FALSE
)
}
if (!(is.character(tag) & length(tag) == 1)) {
stop(
"The 'tag' attribute must be a character vector of length 1",
call. = FALSE
)
}
invisible(Map(validate_logi, val))
l
}
s4 <- t1 %<=>% t2
s4 <- t1 %<=>% t2
t4 <- as_cnf(t1 %<=>% unlcnf(t2))
t4 <- as_cnf(`%<=>%.logi`(t1, t2))
uncnf(t1)
unlcnf(t1)
unlcnf(t1) %<=>% unlcnf(t2)
as_cnf(unlcnf(t1) %<=>% unlcnf(t2))
op(unlcnf(t1))
op(unlcnf(t2))
(print("A"))
lsweep <- function(l) n(l)(Reduce(cat(op(l)), l, right = TRUE))
as_cnf(unlcnf(t1) %<=>% unlcnf(t2))
(cat("A"))
lsweep <- function(l) n(l)(Reduce(print(op(l)), l, right = TRUE))
as_cnf(unlcnf(t1) %<=>% unlcnf(t2))
lsweep <- function(l) {print(op(l)); n(l)(Reduce(op(l), l, right = TRUE))}
as_cnf(unlcnf(t1) %<=>% unlcnf(t2))
lsweep <- function(l) {print(l); n(l)(Reduce(op(l), l, right = TRUE))}
as_cnf(unlcnf(t1) %<=>% unlcnf(t2))
lsweep <- function(l) {print(class(l)); n(l)(Reduce(op(l), l, right = TRUE))}
as_cnf(unlcnf(t1) %<=>% unlcnf(t2))
validate_lcnf(t1)
validate_lcnf(t2)
validate_lcnf(t3)
t2[[length(t2)]]
str(t2[[length(t2)]])
lsweep(t2[[length(t2)]])
str(lsweep(t2[[length(t2)]]))
lsweep(lquote(A))
lsweep <- function(l) n(l)(Reduce(op(l), l, right = TRUE)
setwd("/home/sebastian/Documents/2019/Logi")
source("logi.R")
source("lcnf.R")
source("lsat.R")
s1 <- lquote(((A & B) %<=>% (C | -D) | -(-A & D %xor% E)) %=>% -E)
s2 <- lquote(-A & B | C | -D | E | -(A %<=>% -C))
s3 <- s1 %xor% s2
t1 <- as_lcnf(standardize(s3))
t2 <- as_lcnf(standardize(-s1))
lsolve(s3, truth_table(literals(s3)))
lsolve(t1, truth_table(literals(t1)))
lsolve(t2, truth_table(literals(t2)))
dpll_sat(t2)
walk_sat(t2, p = 0.7, max_flips = 10)
s4 <- t1 %<=>% t2
t1
t2
t1 & t2
t4 <- t1 & t2 & t3
t3 <- t1 %<=>% t2
t4 <- t1 & t2 & t3
setwd("/home/sebastian/Documents/2019/Logi")
source("logi.R")
source("lcnf.R")
source("lsat.R")
s1 <- lquote(((A & B) %<=>% (C | -D) | -(-A & D %xor% E)) %=>% -E)
s2 <- lquote(-A & B | C | -D | E | -(A %<=>% -C))
s3 <- s1 %xor% s2
t1 <- as_lcnf(standardize(s3))
t2 <- as_lcnf(standardize(-s1))
lsolve(s3, truth_table(literals(s3)))
lsolve(t1, truth_table(literals(t1)))
lsolve(t2, truth_table(literals(t2)))
dpll_sat(t2)
walk_sat(t2, p = 0.7, max_flips = 10)
t3 <- t1 %<=>% t2
t4 <- t1 & t2 & t3
dpll_sat(t4)
walk_sat(t4, p = 0.7, max_flips = 10)
t4
dpll_sat(t4)
walk_sat(t4, p = 0.7, max_flips = 10)
walk_sat(t4, p = 0.7, max_flips = 10)
walk_sat(t4, p = 0.7, max_flips = 10)
dpll <- function(l, vals) {
r <- prod(vapply(l, function(x) lsolve(x, vals), logical(1)))
if (!is.na(r)) return(as.logical(r))
s <- find_pure_symbol(l, vals)
if (!is.null(s)) {
cat("p")
vals[[unlist(s)]] <- !not(s)
return(dpll(l, vals))
}
s <- find_unit_clause(l, vals)
if (!is.null(s)) {
cat("u")
vals[[unlist(s)]] <- !not(s)
return(dpll(l, vals))
}
s <- names(vals[vapply(vals, is.na, logical(1))])[[1]]
vals_ <- vals
vals[[s]] <- FALSE
vals_[[s]] <- TRUE
dpll(l, vals) || dpll(l, vals_)
}
dpll_sat(t4)
dpll <- function(l, vals) {
r <- prod(vapply(l, function(x) lsolve(x, vals), logical(1)))
if (!is.na(r)) return(as.logical(r))
s <- find_pure_symbol(l, vals)
if (!is.null(s)) {
cat("p")
vals[[unlist(s)]] <- !not(s)
return(dpll(l, vals))
}
s <- find_unit_clause(l, vals)
if (!is.null(s)) {
print(s)
vals[[unlist(s)]] <- !not(s)
return(dpll(l, vals))
}
s <- names(vals[vapply(vals, is.na, logical(1))])[[1]]
vals_ <- vals
vals[[s]] <- FALSE
vals_[[s]] <- TRUE
dpll(l, vals) || dpll(l, vals_)
}
dpll_sat(t4)
find_unit_clause <- function(l, vals) {
s <- Filter(function(x) length(x) == 1, l)
s <- Filter(function(x) is.na(vals[[unlist(x)]]), s)
if (length(s) > 0) return(s[[1]])
negs <- lapply(names(Filter(Negate(is.na), vals)),
function(x) ifelse(vals[[x]], `-`, identity)(llit(x)))
for (d in l) {
w <- !vapply(d, function(x) -x %in2% negs, logical(1))
if (sum(w) == 1) return(d[w][[1]])
}
NULL
}
dpll_sat(t4)
dpll <- function(l, vals) {
r <- prod(vapply(l, function(x) lsolve(x, vals), logical(1)))
if (!is.na(r)) return(as.logical(r))
s <- find_pure_symbol(l, vals)
if (!is.null(s)) {
vals[[unlist(s)]] <- !not(s)
return(dpll(l, vals))
}
s <- find_unit_clause(l, vals)
if (!is.null(s)) {
vals[[unlist(s)]] <- !not(s)
return(dpll(l, vals))
}
s <- names(vals[vapply(vals, is.na, logical(1))])[[1]]
vals_ <- vals
vals[[s]] <- FALSE
vals_[[s]] <- TRUE
dpll(l, vals) || dpll(l, vals_)
}
dpll_sat(t4)
walk_sat(t4)
walk_sat(t4, 0.7, 10)
walk_sat(t4, 1, 10)
walk_sat(t4, 0, 10)
setwd("/home/sebastian/Documents/2019/Logi")
source("logi.R")
source("lcnf.R")
source("lsat.R")
lquote(A || B)
lquote(A | B)
lquote(A | B %=>% C)
s1 <- lquote(((A & B) %<=>% (C | -D) | -(-A & D %xor% E)) %=>% -E)
s2 <- lquote(-A & B | C | -D | E | -(A %<=>% -C))
s1
s2
s3 <- s1 %xor% s2
s3
t1 <- as_lcnf(standardize(s3))
t1
t2 <- as_lcnf(standardize(-s1))
t2
lsolve(s3, truth_table(literals(s3)))
lsolve(t1, truth_table(literals(t1)))
lsolve(t2, truth_table(literals(t2)))
vec <- c()
for (i in 1:1e7) {
vec <- c(vec, i)
print(i)
}
for (i in 1:1e7) {
vec <- c(vec, i)
if (i %% 1e5 == 0) print(i)
}
100000 %% 10
100001 %% 10
100000 %% 10 == 0
for (i in 1:1e7) {
#vec <- c(vec, i)
if (i %% 1e5 == 0) print(i)
}
for (i in 1:1e7) {
vec <- c(vec, i)
if (i %% 1e4 == 0) print(i)
}
a <_ Reduce(c, 1:10000, numeric(0))
a <- Reduce(c, 1:10000, numeric(0))
a <- Reduce(c, 1:100000, numeric(0))
a <- purrr::reduce(c, 1:100000, numeric(0))
a <- purrr::reduce(1:100000, c, numeric(0))
purrr::reduce
?purrrr::reduce
?purrr::reduce
a <- purrr::reduce(1:10000, c, numeric(0))
a <- Reduce(c, 1:10000, numeric(0))
a <- purrr::reduce(1:10000, c, numeric(0))
c()
c(1, NULL)
for (i in 1:1e7) {
vec <- c(vec, i)
if (i %% 1e4 == 0) print(i)
}
a <- Reduce(c, 1:10000, numeric(0))
append(1:10, 11)
for (i in 1:1e7) {
vec <- append(vec, i)
if (i %% 1e4 == 0) print(i)
}
append
bench::mark(
{
vec <- c()
for (i in 1:1e3) {
vec <- append(vec, i)
}
}
)
f <- function() {
vec <- c()
for (i in 1:1e3) {
vec <- append(vec, i)
}
}
bench::mark(
f()
)
f <- function() {
vec <- c()
for (i in 1:1e4) {
vec <- append(vec, i)
}
}
bench::mark(
f()
)
a <- Reduce(c, 1:10000, numeric(0))
a
f <- function() {
vec <- numeric(0)
for (i in 1:1e4) {
vec <- append(vec, i)
}
vec
}
g <- function() {
Reduce(c, 1:10000, numeric(0))
}
bench::mark(
f(),
g()
)
f <- function() {
vec <- c()
for (i in 1:1e4) {
vec <- append(vec, i)
}
vec
}
bench::mark(
f(),
g()
)
vec <- c()
for (i in 1:1e4) {
vec <- append(vec, i)
}
f <- function() {
vec <- c()
for (i in 1:1e5) {
vec <- append(vec, i)
}
vec
}
g <- function() {
Reduce(c, 1:1e5, numeric(0))
}
bench::mark(
f(),
g()
)
Reduce
forceAndCall
Map
mapply()
mapply
bench::mark(
rFor(1:1e5, `-`),
lapply(1:1e5, `-`)
)
rFor <- function(w, f) {
for (i in seq_along(w)) {
w[[i]] <- f(w[[i]])
}
w
}
bench::mark(
rFor(1:1e5, `-`),
lapply(1:1e5, `-`)
)
bench::mark(
rFor(1:1e5, function(x) x ^ 2),
lapply(1:1e5, function(x) x ^ 2)
)
bench::mark(
rFor(1:1e5, function(x) x ^ 2),
vapply(1:1e5, function(x) x ^ 2, numeric(1))
)
rFor <- function() {
w <- 1:1e5
for (i in seq_along(w)) {
w[[i]] <- w[[i]] ^ 2
}
w
}
mFor <- function() {
vapply(1:1e5, function(x) x ^ 2, numeric(1))
}
bench::mark(
rFor(),
mFor()
)
rFor <- function() {
w <- 1:1e6
for (i in seq_along(w)) {
w[[i]] <- w[[i]] ^ 2
}
w
}
mFor <- function() {
vapply(1:1e6, function(x) x ^ 2, numeric(1))
}
bench::mark(
rFor(),
mFor()
)
rFor <- function() {
w <- 1:1e7
for (i in seq_along(w)) {
w[[i]] <- w[[i]] ^ 2
}
w
}
mFor <- function() {
vapply(1:1e7, function(x) x ^ 2, numeric(1))
}
bench::mark(
rFor(),
mFor()
)
vapply
rFor <- function() {
w <- as.list(1:1e7)
for (i in seq_along(w)) {
w[[i]] <- w[[i]] ^ 2
}
w
}
mFor <- function() {
Map(function(x) x ^ 2, 1:1e7, numeric(1))
}
bench::mark(
rFor(),
mFor()
)
mFor <- function() {
Map(function(x) x ^ 2, 1:1e7)
}
bench::mark(
rFor(),
mFor()
)
rFor <- function() {
w <- as.list(1:1e5)
for (i in seq_along(w)) {
w[[i]] <- w[[i]] ^ 2
}
w
}
mFor <- function() {
Map(function(x) x ^ 2, 1:1e5)
}
bench::mark(
rFor(),
mFor()
)
